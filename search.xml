<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>django框架——Cookie和session</title>
      <link href="/2016/12/03/django%E6%A1%86%E6%9E%B6_day02/"/>
      <url>/2016/12/03/django%E6%A1%86%E6%9E%B6_day02/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Cookie和session的介绍："><a href="#一、Cookie和session的介绍：" class="headerlink" title="一、Cookie和session的介绍："></a>一、Cookie和session的介绍：</h2><h2 id="1-Cookie-介绍："><a href="#1-Cookie-介绍：" class="headerlink" title="1.Cookie 介绍："></a>1.Cookie 介绍：</h2><p>1.1定义：cookie 是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。</p><p>1.2.cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,考虑到安全应当使用session。</p><p>1.3.session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用cookie</p><p>1.4.单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie</p><p>1.5.Cookie基于域名安全，不同域名的Cookie是不能互相访问的，如访问jd.com时向浏览器中写了Cookie信息，使用同一浏览器访问baidu.com时，无法访问到jd.com信息。</p><p>1.6.当浏览器请求某网站时，会将浏览器存储的跟网站相关的所有Cookie信息提交给网站服务器。</p><h5 id="2-设置Cookie"><a href="#2-设置Cookie" class="headerlink" title="2.设置Cookie"></a>2.设置Cookie</h5><p>可以通过HttpResponse对象中的set_cookie方法来设置cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HttpResponse.set_cookie(cookie名, value=cookie值, max_age=cookie有效期)</span></span><br><span class="line"><span class="comment"># max_age 单位为秒，默认为None。</span></span><br><span class="line"><span class="comment"># 如果是临时cookie，可将max_age设置为None。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    response = HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'name1'</span>, <span class="string">'python1'</span>)  <span class="comment"># 临时cookie</span></span><br><span class="line">    response.set_cookie(<span class="string">'name2'</span>, <span class="string">'python2'</span>, max_age=<span class="number">3600</span>)  <span class="comment"># 有效期一小时</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h5 id="3-读取Cookie"><a href="#3-读取Cookie" class="headerlink" title="3.读取Cookie"></a>3.读取Cookie</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_view</span><span class="params">(request)</span>:</span></span><br><span class="line">cookie1 = request.COOKIES.get(<span class="string">'name'</span>)</span><br><span class="line">print(cookie1)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure><h5 id="4-如果cookie被禁用"><a href="#4-如果cookie被禁用" class="headerlink" title="4.如果cookie被禁用"></a>4.如果cookie被禁用</h5><p>   4.1 一种技术叫做URL重写，就是把session id直接附加在URL路径的后面</p><p>   4.2 另外一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"testform"</span> <span class="attr">action</span>=<span class="string">"/xxx"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"jsessionid"</span> <span class="attr">value</span>=<span class="string">"ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line">// 这种技术可以简单的用对action应用URL重写来代替</span><br></pre></td></tr></table></figure><h2 id="二、Session"><a href="#二、Session" class="headerlink" title="二、Session"></a>二、Session</h2><p>2.1 Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了</p><p>2.2 session通过cookie，在客户端保存session_id，而将用户的其他会话消息保存在服务端的session对象中(“session_id”:”{key:value}”)</p><p>2.3 设置session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_session</span><span class="params">(request)</span>:</span></span><br><span class="line">request.session[<span class="string">'one'</span>] = <span class="string">'1'</span></span><br><span class="line"> request.session[<span class="string">'two'</span>] = <span class="string">'2'</span></span><br><span class="line"> request.session[<span class="string">'three'</span>] = <span class="string">'3'</span></span><br><span class="line"> <span class="keyword">return</span> HttpResponse(<span class="string">'保存session数据成功'</span>)</span><br></pre></td></tr></table></figure><p>2.4 获取session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">(request)</span>:</span> one = request.session.get(<span class="string">'one'</span>)</span><br><span class="line"> two = request.session.get(<span class="string">'two'</span>)</span><br><span class="line"> three = request.session.get(<span class="string">'three'</span>)</span><br><span class="line"> text = <span class="string">'one=%s, two=%s, three=%s'</span> % (one,two,three)</span><br><span class="line"> <span class="keyword">return</span> HttpResponse(text)</span><br></pre></td></tr></table></figure><p>2.5 session 操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 清除所有session，在存储中删除值部分</span></span><br><span class="line"> request.session.clear()</span><br><span class="line"> <span class="comment"># 清除session数据，在存储中删除session的整条数据</span></span><br><span class="line"> request.session.flush()</span><br><span class="line"> <span class="comment"># 删除session中的指定键及值，在存储中只删除某个键及对应的值。</span></span><br><span class="line"> <span class="keyword">del</span> request.session[<span class="string">'键'</span>]</span><br><span class="line"> <span class="comment"># 设置session的有效期</span></span><br><span class="line"> request.session.set_expiry(value)</span><br><span class="line"></span><br><span class="line"><span class="string">""" 如果value是一个整数，session将在value秒没有活动后过期。</span></span><br><span class="line"><span class="string">如果value为0，那么用户session的Cookie将在用户的浏览器关闭时过期。</span></span><br><span class="line"><span class="string">如果value为None，那么session有效期将采用系统默认值，默认为两周，可以通过在settings.py中设置SESSION_COOKIE_AGE来设置全局默认值。其中 SESSION_COOKIE_AGE的单位是以秒为单位"""</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django框架--环境搭建及参数传递</title>
      <link href="/2016/12/02/django%E6%A1%86%E6%9E%B6_day01/"/>
      <url>/2016/12/02/django%E6%A1%86%E6%9E%B6_day01/</url>
      
        <content type="html"><![CDATA[<h2 id="一、django框架的注意点："><a href="#一、django框架的注意点：" class="headerlink" title="一、django框架的注意点："></a>一、django框架的注意点：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.如何搭建虚拟环境? 安装虚拟环境的命令 :</span><br><span class="line">  sudo pip install virtualenv</span><br><span class="line">  sudo pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装完虚拟环境后，如果提示找不到mkvirtualenv命令，须配置环境变量：</span><br><span class="line">  <span class="number">2.1</span> 创建目录用来存放虚拟环境</span><br><span class="line">   mkdir $HOME/.virtualenvs</span><br><span class="line"></span><br><span class="line">  <span class="number">2.2</span> 打开~/.bashrc文件，并添加如下：</span><br><span class="line">    export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">    source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>运行</span><br><span class="line">    source ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>创建虚拟环境的常用两种方式；</span><br><span class="line">    <span class="number">4.1</span>  mkvirtualenv venv_name -p python3</span><br><span class="line">    <span class="number">4.2</span>. mkvirtualenv --python=/usr/local/python3<span class="number">.5</span><span class="number">.3</span>/bin/python venv_name</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>djnango自动生成urls文件配置：</span><br><span class="line">   <span class="number">5.1</span> 在所用的虚拟环境中，例如django_py3/lib/python3<span class="number">.5</span>/site-packages/django/conf下，将project_template/project_name/urls.py-tpl复制到app_template下即可</span><br></pre></td></tr></table></figure><h2 id="二、HTTP协议向服务器传参有4种途径："><a href="#二、HTTP协议向服务器传参有4种途径：" class="headerlink" title="二、HTTP协议向服务器传参有4种途径："></a>二、HTTP协议向服务器传参有4种途径：</h2><h4 id="2-1-URL路径参数"><a href="#2-1-URL路径参数" class="headerlink" title="2.1 URL路径参数:"></a>2.1 URL路径参数:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://127.0.0.1:8000/users/index/2018/beijing</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request,year,city)</span>:</span></span><br><span class="line">    print(<span class="string">"city=&#123;1&#125;,year=&#123;0&#125;"</span>.format(year,city))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-2-查询字符串（query-string-，形如key1-value1-amp-key2-value2："><a href="#2-2-查询字符串（query-string-，形如key1-value1-amp-key2-value2：" class="headerlink" title="2.2 查询字符串（query string)，形如key1=value1&amp;key2=value2："></a>2.2 查询字符串（query string)，形如key1=value1&amp;key2=value2：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /qs/?a=1&amp;b=2&amp;a=3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qs</span><span class="params">(request)</span>:</span></span><br><span class="line">    a = request.GET.get(<span class="string">'a'</span>)</span><br><span class="line">    b = request.GET.get(<span class="string">'b'</span>)</span><br><span class="line">    alist = request.GET.getlist(<span class="string">'a'</span>)</span><br><span class="line">    print(a)  <span class="comment"># 3</span></span><br><span class="line">    print(b)  <span class="comment"># 2</span></span><br><span class="line">    print(alist)  <span class="comment"># ['1', '3']</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-请求体传参："><a href="#2-3-请求体传参：" class="headerlink" title="2.3 请求体传参："></a>2.3 请求体传参：</h4><h5 id="2-3-1-表单类型：Form-Data"><a href="#2-3-1-表单类型：Form-Data" class="headerlink" title="2.3.1 表单类型：Form Data"></a>2.3.1 表单类型：Form Data</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_body</span><span class="params">(request)</span>:</span></span><br><span class="line">    a = request.POST.get(<span class="string">'a'</span>)</span><br><span class="line">    b = request.POST.get(<span class="string">'b'</span>)</span><br><span class="line">    alist = request.POST.getlist(<span class="string">'a'</span>)</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(alist)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure><h5 id="2-3-2-非表单类型-：Non-Form-Data（json，xml）"><a href="#2-3-2-非表单类型-：Non-Form-Data（json，xml）" class="headerlink" title="2.3.2 非表单类型 ：Non-Form Data（json，xml）"></a>2.3.2 非表单类型 ：Non-Form Data（json，xml）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_body_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    json_str = request.body</span><br><span class="line">    json_str = json_str.decode()  <span class="comment"># python3.6 无需执行此步</span></span><br><span class="line">    req_data = json.loads(json_str)</span><br><span class="line">    print(req_data[<span class="string">'a'</span>])</span><br><span class="line">    print(req_data[<span class="string">'b'</span>])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-4-请求头"><a href="#2-4-请求头" class="headerlink" title="2.4 请求头"></a>2.4 请求头</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_headers</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(request.META[<span class="string">'CONTENT_TYPE'</span>])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django，虚拟环境 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
